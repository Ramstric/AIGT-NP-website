---
const {
  id,
  innerHtml,
  bgcolor,
  labelcolor,
  type,
  w,
  h,
  iconID,
  link,
  display,
} = Astro.props;

const buttonType = `custom-btn ${type}`;
---

<!--
    Button component
    @param {string} id          - id of the button
    @param {string} innerHtml   - inner html of the button
    @param {string} bgcolor     - background color of the button
    @param {string} labelcolor  - label color of the button
    @param {string} type        - type of the button (invert, normal)
    @param {string} w           - width of the button
    @param {string} h           - height of the button
    @param {string} iconID      - icon id of the button
    @param {string} link        - link of the button
    @param {display} display    - display of the button
-->
<a
  set:html={innerHtml}
  class={buttonType}
  href={link}
  target="_blank"
  id={id}
  ,
  style={`display: ${display}`}
>
  {
    iconID
      ? iconID && (
          <svg>
            <use href={iconID} />
          </svg>
        )
      : null
  }
</a>

<!-- ------ Local style ------ -->

<style define:vars={{ bgcolor: bgcolor, labelcolor: labelcolor, w: w, h: h }}>
  .custom-btn {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    text-align: center;

    width: fit-content;
    height: fit-content;
    padding: 5px 10px;

    background: var(--bgcolor);
    color: var(--background);

    border: none;
    border-radius: 25px;

    cursor: pointer;
    text-decoration: none;

    transition: all 0.25s ease;
    transition-behavior: allow-discrete;

    @starting-style {
      opacity: 0;
      transform: translateX(-50%);
    }

    &[hidden] {
      opacity: 0;
      transform: translateX(-50%);
      display: none !important;
      transition-duration: 0.25s;
      transition-timing-function: ease-out;
    }
  }

  .fixed-w {
    width: var(--w);
  }

  svg {
    height: calc(var(--h) - 10px);
    width: calc(var(--h) - 10px);

    transition: all 0.25s ease;
  }

  .invert:hover {
    background: var(--labelcolor);
    color: var(--bgcolor);
  }

  .invert:hover svg {
    fill: var(--bgcolor);
  }

  .normal:hover {
    box-shadow: 0px 0px 10px 2px rgb(0, 0, 0);
  }
</style>
