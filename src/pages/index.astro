---
import "../styles/global.css";

import Button from "../components/Button.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="hero">
    <div class="title">
      <h1>AI-Generated text detector</h1>
    </div>
    <div class="description">
      <h2>GitHub repo:</h2>
      <a
        href="https://github.com/Ramstric/AI-generated-text-detection-using-NLP"
        target="_blank"
        >github.com/Ramstric/AI-generated-text-detection-using-NLP</a
      >
    </div>
  </div>

  <div class="detection">
    <div class="text-box">
      <textarea
        id="text-box"
        placeholder="Paste your text here, of at least 100 words."></textarea>
    </div>
    <div class="results" id="results">
      <div>
        <h2>Models details</h2>
      </div>
      <div>
        <h3>Logistic Regression</h3>
        <table id="lr">
          <tr>
            <td>Human</td>
            <td>-</td>
          </tr>
          <tr>
            <td>AI</td>
            <td>-</td>
          </tr>
        </table>
      </div>

      <div>
        <h3>Random Forest</h3>
        <table id="rf">
          <tr>
            <td>Human</td>
            <td>-</td>
          </tr>
          <tr>
            <td>AI</td>
            <td>-</td>
          </tr>
        </table>
      </div>

      <div>
        <h3>Support Vector</h3>
        <table id="svm">
          <tr>
            <td>Human</td>
          </tr>
          <tr>
            <td style="color: gray;">No probabilities available</td>
          </tr>
        </table>
      </div>
    </div>
  </div>

  <div class="buttons">
    <Button
      id="analyze-btn"
      innerHtml="Analyze text"
      type="invert"
      labelcolor="var(--blue)"
      bgcolor="var(--primary)"
    />

    <Button
      id="clear-btn"
      innerHtml="Clear text"
      type="invert"
      labelcolor="var(--red)"
      bgcolor="var(--primary)"
      display="none"
    />
  </div>
</Layout>

<style>
  /* #region Hero */
  .hero {
    height: fit-content;
    gap: 10px;

    color: var(--primary);
  }

  .hero .title {
    width: fit-content;
  }

  .hero .description {
    flex-direction: row;
    gap: 10px;
  }

  .hero .description * {
    width: fit-content;
  }

  .hero .description a {
    font-size: var(--h2-desktop);
    color: var(--blue);

    transition: color 0.2s;
  }

  .hero .description a:hover {
    color: var(--yellow);
  }
  /* #endregion */

  /* #region Detection */
  .detection {
    flex-direction: row;
    gap: 10px;
    transition: all 0.25s ease;
  }

  .detection .text-box textarea {
    padding: 15px;
    border-radius: 15px;
    border: none;

    color: var(--background);
    background-color: var(--primary);

    resize: none;
    outline: none;
  }

  .detection .text-box {
    flex-grow: 1;
    flex-shrink: 1;
  }

  .detection .results {
    justify-content: flex-start;
    flex-grow: 1;
    flex-shrink: 25;
    opacity: 0;

    overflow: hidden;
    width: fit-content;

    gap: 20px;
    padding: 25px;

    border-radius: 15px;
    background-color: var(--primary);

    transition: all 0.25s ease;
  }

  .detection .results div {
    white-space: nowrap;
  }

  .detection .results * {
    height: fit-content;
  }

  .detection .results table {
    align-self: flex-end;
  }

  .detection .results tr:first-child {
    color: var(--blue);
  }

  .detection .results tr:last-child {
    color: var(--red);
  }

  /* #endregion */

  /* #region Buttons */
  .buttons {
    height: fit-content;
    flex-direction: row;
    gap: 50px;

    transition: all 0.25s ease;
  }

  /* #endregion */
</style>

<script>
  const backendURL = "";

  const analyzeButton = document.getElementById("analyze-btn") as HTMLButtonElement;
  const clearButton = document.getElementById("clear-btn") as HTMLButtonElement;
  const textInput = document.getElementById("text-box") as HTMLTextAreaElement;
  const resultsArea = document.getElementById("results") as HTMLDivElement;

  const lrModelResult = document.getElementById("lr") as HTMLTableElement;
  const rfModelResult = document.getElementById("rf") as HTMLTableElement;
  const svmModelResult = document.getElementById("svm") as HTMLTableElement;

  async function predictModel(text: string) {
    fetch(backendURL + "/api/predict", {method: "POST",body: JSON.stringify({ text: text }),
    }).then((response) => {
      response.json().then((data) => {
        console.log(data);

        lrModelResult.getElementsByTagName("tr")[0].getElementsByTagName("td")[1].innerText =(data.LogisticRegression_proba[0] * 100).toFixed(2) + "%";
        lrModelResult.getElementsByTagName("tr")[1].getElementsByTagName("td")[1].innerText =(data.LogisticRegression_proba[1] * 100).toFixed(2) + "%";

        rfModelResult.getElementsByTagName("tr")[0].getElementsByTagName("td")[1].innerText =(data.LogisticRegression_proba[0] * 100).toFixed(2) + "%";
        rfModelResult.getElementsByTagName("tr")[1].getElementsByTagName("td")[1].innerText =(data.LogisticRegression_proba[1] * 100).toFixed(2) + "%";

        svmModelResult.getElementsByTagName("tr")[0].getElementsByTagName("td")[0].innerText =data.SVC === 1 ? "AI" : "Human";
        svmModelResult.getElementsByTagName("tr")[0].getElementsByTagName("td")[0].style.color =data.SVC === 1 ? "var(--red)" : "var(--blue)";
      });
    }).catch((error) => {return error;});
  }

  
  analyzeButton.addEventListener("click", async () => {
    if (textInput.value === "") {} 
    else {
      clearButton.hidden = false;
      clearButton.style.display = "block";
      resultsArea.style.flexShrink = "0";
      resultsArea.style.opacity = "1";
      try {
        await predictModel(textInput.value);
      } catch (error) {
        console.error("Error:", error);
      }
    }
  });

  clearButton.addEventListener("click", () => {
    textInput.value = "";
    clearButton.hidden = true;

    resultsArea.style.flexShrink = "25";
    resultsArea.style.opacity = "0";
  });
</script>
